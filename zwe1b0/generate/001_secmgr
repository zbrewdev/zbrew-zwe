#!/bin/sh
# Generate SECMGR commands for RACF, ACF2 or TSS
# JCL below to be converted to script
#

if ! [ $# -eq 2 ]; then
	echo "Syntax: 001_secmgr ENABLE|DISABLE <output-script>" >&2
	exit 8
fi

verb="$1"
script="$2"
zbrew=`whence zbrew`
zbrewdir=${zbrew%/*}
zbrewroot=${zbrewdir%/*}

cat <<'EOF' >${script}
#!/bin/sh   
SetupACF2() {
	echo "TopSecret Security Manager not implemented yet. See the following for TSO commands" >&2
echo >/dev/null <<zzz
//*
//*********************************************************************
//*
//* Top Secret ONLY, customize to meet your system requirements
//*
//TSS      DD DATA,DLM=$$,SYMBOLS=JCLONLY

/* DEFINE ADMINISTRATORS ........................................... */

/* group for administrators                                          */
  TSS LIST(&ADMINGRP.) SEGMENT(OMVS)
  TSS CREATE(&ADMINGRP.) TYPE(GROUP) +
   NAME('ZOWE ADMINISTRATORS') +
   DEPT(&ADMINDEP.)
  TSS ADD(&ADMINGRP.) GID(&ADMINGID.)

/* TODO add sample command to add admin to &ADMINGRP */

/* DEFINE STARTED TASK ............................................. */

/* comment out if &STCGROUP matches &ADMINGRP (default), expect      */
/*   warning messages otherwise                                      */
/* group for started tasks                                           */
  TSS LIST(&STCGROUP.) SEGMENT(OMVS)
  TSS CREATE(&STCGROUP.) TYPE(GROUP) +
   NAME('STC GROUP WITH OMVS SEGEMENT') +
   DEPT(&STCGDEP.)
  TSS ADD(&STCGROUP.) GID(&STCGID.)

/* */

/* userid for ZOWE main server                                       */
  TSS LIST(&ZOWEUSER.) SEGMENT(OMVS)
  TSS CREATE(&ZOWEUSER.) TYPE(USER) PASS(NOPW,0) +
   NAME('ZOWE MAIN SERVER') +
   DEPT(&STCUDEP.)
  TSS ADD(&ZOWEUSER.) GROUP(&STCGROUP.) DFLTGRP(&STCGROUP.) +
   HOME(/tmp) OMVSPGM(/bin/sh) UID(&ZOWEUID.)

/* userid for XMEM cross memory server                               */
  TSS LIST(&XMEMUSER.) SEGMENT(OMVS)
  TSS CREATE(&XMEMUSER.) TYPE(USER) PASS(NOPW,0) +
   NAME('ZOWE XMEM CROSS MEMORY SERVER') +
   DEPT(&STCUDEP.)
  TSS ADD(&XMEMUSER.) GROUP(&STCGROUP.) DFLTGRP(&STCGROUP.) +
   HOME(/tmp) OMVSPGM(/bin/sh) UID(&XMEMUID.)

/* comment out if &AUXUSER matches &XMEMUSER (default), expect       */
/*   warning messages otherwise                                      */
/* userid for XMEM auxilary cross memory server                      */
  TSS LIST(&AUXUSER.) SEGMENT(OMVS)
  TSS CREATE(&AUXUSER.) TYPE(USER) PASS(NOPW,0) +
   NAME('ZOWE XMEM AUX SERVER') +
   DEPT(&STCUDEP.)
  TSS ADD(&AUXUSER.) GROUP(&STCGROUP.) DFLTGRP(&STCGROUP.) +
   HOME(/tmp) OMVSPGM(/bin/sh) UID(&AUXUID.)

/* */

/* started task for ZOWE main server                                 */
  TSS LIST(STC) PROCNAME(&ZOWESTC.) PREFIX
  TSS ADD(STC) PROCNAME(&ZOWESTC.) ACID(&ZOWEUSER.)
  TSS ADD(&ZOWEUSER.) FAC(STC)

/* started task for XMEM cross memory server                         */
  TSS LIST(STC) PROCNAME(&XMEMSTC.) PREFIX
  TSS ADD(STC) PROCNAME(&XMEMSTC.) ACID(&XMEMUSER.)
  TSS ADD(&XMEMUSER.) FAC(STC)

/* started task for XMEM auxilary cross memory server                */
  TSS LIST(STC) PROCNAME(&AUXSTC.) PREFIX
  TSS ADD(STC) PROCNAME(&AUXSTC.) ACID(&AUXUSER.)
  TSS ADD(&AUXUSER.) FAC(STC)

/* The &ZOWESTC started task is a multi-user address space therefore */
/* a TSS FACILITY needs to be defined and assigned to the started    */
/* task. The all acids signing on to the started task will need to   */
/* be authorized to the FACILITY.                                    */
/*                                                                   */
/* The following steps have to performed manually. See more details  */
/* in the 'Configuring the z/OS system for Zowe' section,            */
/* https://docs.zowe.org/stable/user-guide/configure-zos-system.html */
/*                                                                   */
/* Create FACILITY example:                                          */
/* In the TSSPARMS add the following lines to create                 */
/* the new FACILITY.                                                 */
/*                                                                   */
/* FACILITY(USER11=NAME=ZOWE)                                        */
/* FACILITY(ZOWE=MODE=FAIL)                                          */
/* FACILITY(ZOWE=RES)                                                */
/*                                                                   */
/* To assign the FACILITY to the started task issue the following    */
/* command:                                                          */
/*                                                                   */
/* TSS ADD(started_task_acid) MASTFAC(ZOWE)                          */
/*                                                                   */
/* To authorize a user to signon to the FACILITY, issues the         */
/* following command.                                                */
/*                                                                   */
/* TSS ADD(user_acid) FAC(ZOWE)                                      */

/* DEFINE ZOWE SERVER PERMISIONS ................................... */

/* permit Zowe main server to use XMEM cross memory server           */
  TSS ADD(&FACACID.) IBMFAC(ZWES.IS)
  TSS WHOHAS IBMFAC(ZWES.IS)
  TSS PERMIT(&ZOWEUSER.) IBMFAC(ZWES.IS) ACCESS(READ)

/* permit Zowe main server to create a user's security environment   */
/* ATTENTION: Defining the BPX.DAEMON or BPX.SERVER profile makes    */
/*            z/OS UNIX switch to z/OS UNIX level security. This is  */
/*            more secure, but it can impact operation of existing   */
/*            applications. Test this thoroughly before activating   */
/*            it on a production system.                             */
  TSS ADD(&FACACID.) IBMFAC(BPX.)
  TSS WHOHAS IBMFAC(BPX.DAEMON)
  TSS PER(&ZOWEUSER.) IBMFAC(BPX.DAEMON) ACCESS(UPDATE)
  TSS WHOHAS IBMFAC(BPX.SERVER)
  TSS PER(&ZOWEUSER.) IBMFAC(BPX.SERVER) ACCESS(UPDATE)

/* Allow ZOWEUSER access to BPX.JOBNAME                              */
  TSS WHOHAS IBMFAC(BPX.JOBNAME)
  TSS PER(&ZOWEUSER.) IBMFAC(BPX.JOBNAME) ACCESS(READ)

/** comment out to not use SUPERUSER.FILESYS, see JCL comments       */
/** permit Zowe main server to write persistent data                 */
  TSS ADD(&FACACID.) UNIXPRIV(SUPERUSE)
  TSS WHOHAS IBMFAC(SUPERUSER.FILESYS)
  TSS PER(&ZOWEUSER.) UNIXPRIV(SUPERUSER.FILESYS) ACCESS(CONTROL)

/* DEFINE ZOWE DATA SET PROTECTION ................................. */

/* - &HLQ..SZWEAUTH is an APF authorized data set. It is strongly    */
/*   advised to protect it against updates.                          */

/* HLQ stub                                                          */
  TSS ADD DEPT(&ADMINDEP.) DATASET(&HLQ.)

/* general data set protection                                       */
  TSS WHOHAS DATASET(&HLQ.)
  TSS PER(ALL) DATASET(&HLQ..) ACCESS(READ)
  TSS PER(&SYSPROG.) DATASET(&HLQ..) ACCESS(ALL)

/* show results                                                      */
  TSS WHOHAS DATASET(&HLQ.)

/* ................................................................. */
/* only the last RC is returned, this command ensures it is a 0      */
PROFILE
//*
zzz
	return 8 
}

SetupTopSecret() {
	echo "TopSecret Security Manager not implemented yet. See the following for TSO commands" >&2

echo >/dev/null <<zzz
//*
//*********************************************************************
//*
//* ACF2 ONLY, customize to meet your system requirements
//*
//ACF2     DD DATA,DLM=$$,SYMBOLS=JCLONLY
ACF
*
* DEFINE ADMINISTRATORS ...........................................
*
* group for administrators
* replace AUTOGID with GID(&ADMINGID.) if AUTOGID is not enabled
*
SET PROFILE(GROUP) DIV(OMVS)
INSERT &ADMINGRP. AUTOGID
F ACF2,REBUILD(GRP),CLASS(P)
*
* uncomment and customize to add an existing userid as administrator
*
* SET X(ROL)
* INSERT &ADMINGRP. INCLUDE(userid) ROLE
* F ACF2,NEWXREF,TYPE(ROL)
*
* DEFINE STARTED TASK .............................................
*
* comment out if &STCGROUP matches &ADMINGRP (default), expect
*   warning messages otherwise
* group for started tasks
* replace AUTOGID with GID(&STCGID.) if AUTOGID is not enabled
*
SET PROFILE(GROUP) DIV(OMVS)
INSERT &STCGROUP. AUTOGID
F ACF2,REBUILD(GRP),CLASS(P)
*
*****
*
* userid for ZOWE main server
* replace AUTOUID with UID(&ZOWEUID.) if AUTOUID is not enabled
*
SET LID
INSERT &ZOWEUSER. GROUP(&STCGROUP.)
SET PROFILE(USER) DIV(OMVS)
INSERT &ZOWEUSER. AUTOUID HOME(/tmp) OMVSPGM(/bin/sh)
F ACF2,REBUILD(USR),CLASS(P),DIVISION(OMVS)
*
* userid for XMEM cross memory server
* replace AUTOUID with UID(&XMEMUID.) if AUTOUID is not enabled
*
SET LID
INSERT &XMEMUSER. GROUP(&STCGROUP.)
SET PROFILE(USER) DIV(OMVS)
INSERT &XMEMUSER. AUTOUID HOME(/tmp) OMVSPGM(/bin/sh)
F ACF2,REBUILD(USR),CLASS(P),DIVISION(OMVS)
*
* comment out if &AUXUSER matches &XMEMUSER (default), expect
*   warning messages otherwise
* userid for XMEM auxilary cross memory server
* replace AUTOUID with UID(&AUXUID.) if AUTOUID is not enabled
*
SET LID
INSERT &AUXUSER. GROUP(&STCGROUP.)
SET PROFILE(USER) DIV(OMVS)
INSERT &AUXUSER. AUTOUID HOME(/tmp) OMVSPGM(/bin/sh)
F ACF2,REBUILD(USR),CLASS(P),DIVISION(OMVS)
*
*****
*
* started task for ZOWE main server
*
SET CONTROL(GSO)
INSERT STC.&ZOWESTC. LOGONID(&ZOWEUSER.) GROUP(&STCGROUP.) +
STCID(&ZOWESTC.)
F ACF2,REFRESH(STC)
*
* started task for XMEM cross memory server
*
SET CONTROL(GSO)
INSERT STC.&XMEMSTC. LOGONID(&XMEMUSER.) GROUP(&STCGROUP.) +
STCID(&XMEMSTC.)
F ACF2,REFRESH(STC)
*
* started task for XMEM auxilary cross memory server
*
SET CONTROL(GSO)
INSERT STC.&AUXSTC. LOGONID(&AUXUSER.) GROUP(&STCGROUP.) +
STCID(&AUXSTC.)
F ACF2,REFRESH(STC)
*
* DEFINE ZOWE SERVER PERMISIONS ...................................
*
* define a role holding the permissions and add &ZOWEUSER to it
*
SET X(ROL)
INSERT &STCGROUP. INCLUDE(&ZOWEUSER.) ROLE
F ACF2,NEWXREF,TYPE(ROL)
*
* permit Zowe main server to use XMEM cross memory server
*
SET RESOURCE(FAC)
RECKEY ZWES ADD(IS SERVICE(READ) ROLE(&STCGROUP.) ALLOW)
F ACF2,REBUILD(FAC)
*
* permit Zowe main server to create a user's security environment
* ATTENTION: Defining the BPX.DAEMON or BPX.SERVER profile makes
*            z/OS UNIX switch to z/OS UNIX level security. This is
*            more secure, but it can impact operation of existing
*            applications. Test this thoroughly before activating
*            it on a production system.
*
SET RESOURCE(FAC)
RECKEY BPX ADD(DAEMON SERVICE(UPDATE) ROLE(&STCGROUP.) ALLOW)
RECKEY BPX ADD(SERVER SERVICE(UPDATE) ROLE(&STCGROUP.) ALLOW)
*
* Allow STCGROUP role access to BPX.JOBNAME
RECKEY BPX ADD(JOBNAME SERVICE(READ) ROLE(&STCGROUP.) ALLOW)
F ACF2,REBUILD(FAC)
*
** comment out to not use SUPERUSER.FILESYS, see JCL comments
** permit Zowe main server to write persistent data
*
  SET RESOURCE(UNI)
  RECKEY SUPERUSER.FILESYS ADD(SERVICE(READ) ROLE(&STCGROUP.) ALLOW)
  F ACF2,REBUILD(UNI)
*
* DEFINE ZOWE DATA SET PROTECTION .................................
*
* - &HLQ..SZWEAUTH is an APF authorized data set. It is strongly
*   advised to protect it against updates.
*
*  HLQ stub
SET RULE
*  general data set protection
LIST &HLQ.
RECKEY $&HLQ. ADD(- UID(-) READ(A) EXEC(P))
RECKEY $&HLQ. ADD(- UID(&SYSPROG.) READ(A) EXEC(A) ALLOC(A) WRITE(A))
*
*  show results
LIST &HLQ.
*
* .................................................................
/* only the last RC is returned, this command ensures it is a 0      */
PROFILE
zzz
	return 8 
}

SetupRACF() {
	racfSetGenericClasses "FACILITY UNIXPRIV"
	chk "$?" "Unable to configure ZWE1B0"

	racfActivateAndShareClasses "FACILITY UNIXPRIV"
	chk "$?" "Unable to configure ZWE1B0"

        if ! `racfGroupExists $ZWE1B0_ADMINGRP` ; then
                issueTSO "RDEFINE STARTED ** STDATA(USER(=MEMBER) GROUP($ZWE1B0_ADMINGRP))"
                chk "$?" "Unable to define $ZWE1B0_ADMINGRP"
	#msf - need to check if AUTOGID is enabled. If not, use ZWE1B0_ADMINGID
		issueTSO "ADDGROUP $ZWE1B0_ADMINGRP OMVS(AUTOGID) DATA('Zowe Administrators')"
		chk "$?" "Unable to add group with OMVS segment for Zowe Administrators" 
  	fi

        if ! `racfGroupExists $ZWE1B0_STCGROUP` ; then
                issueTSO "RDEFINE STARTED ** STDATA(USER(=MEMBER) GROUP($ZWE1B0_STCGROUP))"
                chk "$?" "Unable to define $ZWE1B0_STCGROUP"
	#msf - need to check if AUTOGID is enabled. If not, use ZWE1B0_STCGID
		issueTSO "ADDGROUP $ZWE1B0_STCGROUP OMVS(AUTOGID) DATA('Started Task Group with OMVS Segment')"
		chk "$?" "Unable to add group with OMVS segment for started tasks"
  	fi

        tsocmd "DELUSER $ZWE1B0_ZOWEUSER" >/dev/null 2>&1
#msf - need to check if AUTOUID is enabled. If not, use ZWE1B0_ZOWEUID
	issueTSO "ADDUSER $ZWE1B0_ZOWEUSER DFLTGRP($ZWE1B0_STCGROUP) NOPASSWORD NAME('Zowe Server') OMVS(AUTOUID HOME(/tmp) PROGRAM(/bin/sh) ) DATA('Zowe Main Server')"
  	chk "$?" "Unable to create user $ZWE1B0_ZOWEUSER"

        tsocmd "DELUSER $ZWE1B0_XMEMUSER" >/dev/null 2>&1
#msf - need to check if AUTOUID is enabled. If not, use ZWE1B0_XMEMUID
	issueTSO "ADDUSER $ZWE1B0_XMEMUSER DFLTGRP($ZWE1B0_STCGROUP) NOPASSWORD NAME('Zowe XMEM Server') OMVS(AUTOUID HOME(/tmp) PROGRAM(/bin/sh) ) DATA('Zowe XMEM Cross Memory Server')"
  	chk "$?" "Unable to create user $ZWE1B0_XMEMUSER"

        tsocmd "DELUSER $ZWE1B0_AUXUSER" >/dev/null 2>&1
#msf - need to check if AUTOUID is enabled. If not, use ZWE1B0_AUXUID
	issueTSO "ADDUSER $ZWE1B0_AUXUSER DFLTGRP($ZWE1B0_STCGROUP) NOPASSWORD NAME('Zowe XMEM AUX Server') OMVS(AUTOUID HOME(/tmp) PROGRAM(/bin/sh) ) DATA('Zowe XMEM AUX Cross Memory Server')"
  	chk "$?" "Unable to create user $ZWE1B0_AUXUSER"

	if ! `racfProfileExists "STARTED" "$ZWE1B0_ZOWESTC.*"`; then
		issueTSO "RDEFINE STARTED $ZWE1B0_ZOWESTC.* STDATA(USER($ZWE1B0_ZOWEUSER) GROUP($ZWE1B0_STCGROUP) TRUSTED(NO)) DATA('Zowe Main Server')"
		chk "$?" "Unable to define started task $ZWE1B0_ZOWESTC"
	fi

	if ! `racfProfileExists "STARTED" "$ZWE1B0_XMEMSTC.*"`; then
		issueTSO "RDEFINE STARTED $ZWE1B0_XMEMSTC.* STDATA(USER($ZWE1B0_XMEMUSER) GROUP($ZWE1B0_STCGROUP) TRUSTED(NO)) DATA('Zowe XMEM Cross Memory Server')"
		chk "$?" "Unable to define started task $ZWE1B0_XMEMSTC"
	fi

	if ! `racfProfileExists "STARTED" "$ZWE1B0_AUXSTC.*"`; then
		issueTSO "RDEFINE STARTED $ZWE1B0_AUXSTC.* STDATA(USER($ZWE1B0_AUXUSER) GROUP($ZWE1B0_STCGROUP) TRUSTED(NO)) DATA('Zowe XMEM Aux Cross Memory Server')"
		chk "$?" "Unable to define started task $ZWE1B0_XMEMSTC"
	fi

        if ! `racfProfileExists "FACILITY" "ZWES.IS"` ; then
	        issueTSO "RDEFINE FACILITY ZWES.IS UACC(NONE)"
  		chk "$?" "Unable to define profile ZWES.IS"
        fi
	racfPermitUsers "FACILITY" "ZWES.IS" "READ" "$ZWE1B0_ZOWEUSER" 
	chk "$?" "Unable to configure ZWE1B0"

        if ! `racfProfileExists "FACILITY" "BPX.SERVER"` ; then
	        issueTSO "RDEFINE FACILITY BPX.SERVER UACC(NONE)"
  		chk "$?" "Unable to define profile BPX.SERVER"
        fi
	racfPermitUsers "FACILITY" "BPX.SERVER" "UPDATE" "$ZWE1B0_ZOWEUSER" 
	chk "$?" "Unable to configure ZWE1B0"

        if ! `racfProfileExists "FACILITY" "BPX.DAEMON"` ; then
	        issueTSO "RDEFINE FACILITY BPX.DAEMON UACC(NONE)"
  		chk "$?" "Unable to define profile BPX.DAEMON"
        fi
	racfPermitUsers "FACILITY" "BPX.DAEMON" "UPDATE" "$ZWE1B0_ZOWEUSER" 
	chk "$?" "Unable to configure ZWE1B0"

        if ! `racfProfileExists "FACILITY" "BPX.JOBNAME"` ; then
	        issueTSO "RDEFINE FACILITY BPX.JOBNAME UACC(NONE)"
  		chk "$?" "Unable to define profile BPX.JOBNAME"
        fi
	racfPermitUsers "FACILITY" "BPX.JOBNAME" "READ" "$ZWE1B0_ZOWEUSER" 
	chk "$?" "Unable to configure ZWE1B0"

        if ! `racfProfileExists "UNIXPRIV" "SUPERUSER.FILESYS"` ; then
	        issueTSO "RDEFINE UNIXPRIV SUPERUSER.FILESYS UACC(NONE)"
  		chk "$?" "Unable to define profile SUPERUSER.FILESYS"
        fi
	racfPermitUsers "UNIXPRIV" "SUPERUSER.FILESYS" "CONTROL" "$ZWE1B0_ZOWEUSER" 
	chk "$?" "Unable to configure ZWE1B0"

	if ! `racfGroupExists $ZWE1B0_HLQ` ; then
		issueTSO "ADDGROUP $ZWE1B0_HLQ DATA('Zowe -HLQ STUB')"
		chk "$?" "Unable to add group $ZWE1B0_HLQ"
	fi
	if `racfEnhancedGenericNamingInEffect`; then
		wildcard="*.**"
	else
		wildcard="*"
	fi

	if ! `racfDatasetProfileExists "$ZWE1B0_HLQ.$wildcard"`; then
		issueTSO "ADDSD  '$ZWE1B0_HLQ.$wildcard' UACC(READ) DATA('Zowe')"
		chk "$?" "Unable to add dataset profile $ZWE1B0_HLQ"

		racfPermitUsers "DATASET" "'$ZWE1B0_HLQ.$wildcard'" "ALTER" "$ZWE1B0_SYSPROG"
		chk "$?" "Unable to configure ZWE1B0"
	fi
  	racfRefreshClasses "FACILITY STARTED"
	chk "$?" "Unable to configure ZWE1B0"

	return 0
}
EOF

chmod u+x "${script}"
cat << EOF >>${script}
export PATH=${zbrewdir}:\$PATH
. zbrewsetswenv zwe1b0
#set -x
sp=\`secmgr\`
if [ "\${sp}" = "RCVT" ]; then
	SetupRACF
elif [ "\${sp}" = "TSS" ]; then
	SetupTopSecret
elif [ "\${sp}" = "ACF2" ]; then
	SetupACF2
else
	echo "Error: Unsupported security manager: ${sp}" >&2
	exit 16
fi
exit $?
EOF
exit 0

